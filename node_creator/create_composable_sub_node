#!/bin/bash

echo "This will create ROS II Composable node C++ for You."

# Create your_program.cpp
echo "To create composable node ( C++ ),, "
read -p "Please Enter file name :" file_name
touch $file_name.cpp

# add buildin headers
echo "//#include <chrono>"                                                              >> $file_name.cpp
echo "//#include <cstdio>"                                                              >> $file_name.cpp
echo "#include <memory>"                                                                >> $file_name.cpp
echo "//#include <utility>"                                                             >> $file_name.cpp
echo "#include \"rclcpp/rclcpp.hpp\""                                                   >> $file_name.cpp
echo "#include \"rclcpp_components/register_node_macro.hpp\""                           >> $file_name.cpp

# add custom headers
read -p "Please enter Header for Subscriber ( example: std_msgs/msg/string ):" sub_header
echo "#include \"$sub_header.hpp\""                                                     >> $file_name.cpp

echo " "                                                                                >> $file_name.cpp
echo "//using namespace std::chrono_literals;"                                          >> $file_name.cpp
echo " "                                                                                >> $file_name.cpp

# class
read -p "Enter Class Name ( example: Listener ):" class_name
echo -e "class $class_name : public rclcpp::Node"                                       >> $file_name.cpp
echo -e "{"                                                                             >> $file_name.cpp # start Class
echo -e "\tpublic:"                                                                     >> $file_name.cpp
echo -e "\t\t$class_name(const rclcpp::NodeOptions & options)"                          >> $file_name.cpp

# Class Name to Node name ( MyClass or myClass to my_class )
# convert the first character to lowercase
camelString="$(tr '[:upper:]' '[:lower:]' <<< "${class_name:0:1}")${class_name:1}"
# convert camelCase to snake_case
snake_string=$(echo "$camelString" | sed 's/\([A-Z]\)/_\1/g' | tr '[:upper:]' '[:lower:]')


# Header header string to template ( std_msgs/msg/int32 to std_msgs::msg::Int32 )
# set IFS (Internal Field Separator) to comma
IFS='/' read -r -a array <<< "$sub_header"
my_array=()
for element in "${array[@]}"
do
    my_array+=("$element")
done
# echo ${my_array[2]}
# Change Last element first Character to Captical Character
first_str=${my_array[0]}
second_str=${my_array[1]}
last_str=${my_array[2]}
Last_str="$(tr '[:lower:]' '[:upper:]' <<< "${last_str:0:1}")${last_str:1}"

echo -e "\t\t: Node(\"$snake_string\", options)"                                            >> $file_name.cpp # C++ initializer
echo -e "\t\t{"                                                                             >> $file_name.cpp

read -p "Please enter Subscriber topic name ( example: my_integer ):" topic_name
echo -e "\t\t\tsubscription_ = this->create_subscription<$first_str::$second_str::$Last_str>("  >> $file_name.cpp
echo -e "\t\t\t\t\"$topic_name\", 10, std::bind(&MyComposableSubscriber::topic_callback, this, std::placeholders::_1));" >> $file_name.cpp
echo -e "\t\t\tRCLCPP_INFO(this->get_logger(), "My Composable Subscriber Node has been started.");">> $file_name.cpp
echo -e "\t\t}"                                                                             >> $file_name.cpp  
#-----------------------------------------------------------------------------------  
echo -e "\tprivate:"                                                                        >> $file_name.cpp
echo -e "\t\tvoid "                                                                         >> $file_name.cpp
echo -e "\t\ttopic_callback(const $first_str::$second_str::$Last_str::SharedPtr msg) const" >> $file_name.cpp
echo -e "\t\t{"                                                                             >> $file_name.cpp
echo -e "\t\t\t// do your work"                                                             >> $file_name.cpp
echo -e "\t\t}"                                                                             >> $file_name.cpp
echo -e "\t\trclcpp::Subscription<$first_str::$second_str::$Last_str>::SharedPtr subscription_;">> $file_name.cpp
#-----------------------------------------------------------------------------------  
echo -e "};"                                                                                >> $file_name.cpp # end Class
echo " "
echo "#include \"rclcpp_components/register_node_macro.hpp\""                               >> $file_name.cpp
echo "RCLCPP_COMPONENTS_REGISTER_NODE($class_name)"                                         >> $file_name.cpp

echo " "
echo "--------------- ADD these lines to CMakeLists.txt ---------------"
echo " "
echo "# Declare a C++ library"
echo "add_library(rom_$file_name SHARED src/$file_name.cpp)"
echo "ament_target_dependencies(rom_$file_name rclcpp rclcpp_components $first_str)"
echo " "
echo "# Register the component"
echo "rclcpp_components_register_nodes(rom_$file_name \"$class_name\")"
echo " "
echo "# Install the library"
echo "install(TARGETS rom_$file_name"
echo -e "\tARCHIVE DESTINATION lib"
echo -e "\tLIBRARY DESTINATION lib"
echo -e "\tRUNTIME DESTINATION bin)"
echo " "
echo "------------------------------ END ------------------------------"
echo " "
echo " "
echo "--------------------------- How to Run --------------------------"
echo " "
echo "# 3 modes ( mt(multithread), single_thread, isolated ) "
echo "ros2 run rclcpp_components component_container_mt"
echo "ros2 component load /ComponentManager your_pkg_name $class_name"
echo " "
echo "------------------------------ END ------------------------------"
echo " "
echo " "
echo "--------------------------- How to Launch --------------------------"
echo " "
echo -e "from launch import LaunchDescription"
echo -e "from launch_ros.actions import ComposableNodeContainer"
echo -e "from launch_ros.descriptions import ComposableNode"
echo -e "def generate_launch_description():"
echo -e "\tcontainer = ComposableNodeContainer("
echo -e "\t\t\tname='my_container',"
echo -e "\t\t\tnamespace='',"
echo -e "\t\t\tpackage='rclcpp_components',"
echo -e "\t\t\tcomposable_node_descriptions=["
echo -e "\t\t\t\tComposableNode("
echo -e "\t\t\t\t\tpackage='your_pkg_name',"
echo -e "\t\t\t\t\tplugin='$class_name',"
echo -e "\t\t\t\t\tname='as_you_like'),"
echo -e "\t\t\t],"
echo -e "\t\t\toutput='screen',"
echo -e "\t)"
echo -e "\treturn LaunchDescription([container])"
echo " "
echo "------------------------------ END ------------------------------"
echo " "